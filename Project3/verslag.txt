# Verslag opgave 3

Om mijn eigen programmeertaal te vertalen naar Haskell, gebruik ik 2 bestanden Interpreter.hs, die zorgt voor het grafische en werkt met de Gloss interfase, en Parser.hs, die de Interpreter hierbij helpt. Parser.hs bevat de parser, een monad en een monad transformer.

De parser moet als input een lijst van Strings krijgen. Dit is een lijst van alle regels van het spel dat beschreven is met de eigen programmeertaal. Het resultaat dat dan teruggegeven wordt, is een lijst van tuples van een type a een lijst van Strings. De functies hasSubstring en possible hebben een Parser Int als returnwaarde. Bij hasSubstring worden alle indexen van de lijst gezocht waarin de gekregen substring voorkomt. Bij possible worden alle indexen van de lijst van strings gezocht die een if-statement bevatten en wordt hiervoor de functie hasSubstring gebruikt.

De Monad die ik gebruikt heb, is de Object Monad en is gebaseerd op de State Monad. Deze bevat de functie getObject om een tupel terug te krijgen. De functies die deze monad als returnwaarde hebben, zijn getPixel, choose, addCoord en indexOf.
Bij getPixel worden twee parameters meegegeven: een String die de vorm van de pixel bevat en een Coord die de coördinaat van de pixel voorstelt. De returnwaarde is een Object van String en Picture die na uitvoering van getObject de tuple (Picture,String) teruggeeft. De String meegegeven in Object kan gelezen worden als een lijst van getallen. Deze lijst bevat twee getallen die gebruikt worden voor de functie translate, een getal voor de grootte van de pixel en 4 voor het creëren van de kleur van de pixel.
De functie choose zal een Object teruggeven op basis van een lijst van een bepaald type en een specifieke instantie van dat type. Deze zorgt ervoor dat je na het oproepen van getObject een tuple krijgt met die gegeven instantie en de lijst zonder die instantie.
Bij addCoord wordt de parameter vooraan aan de lijst toegevoegd en wordt het laatste element uit de lijst gehaald. Hierdoor wordt een Object teruggegeven met een tupel van dit laatste element en de nieuwe lijst.
Om de index te vinden van het eerste element in de lijst waarvoor het gegeven predicaat geldt, wordt indexOf gebruikt. Daarbij krijg je een Object met een tupel van de index en een lijst met enkel het gezochte element.

Mijn monad transformer is het type MaybeT m a. Als hierop de functie runMaybeT wordt uitgevoerd, wordt dit omgezet naar m (Maybe a). Er zijn twee functies die deze monad transformer als returnwaarde hebben, namelijk contains en findInList. De eerste functie geeft een MaybeT (Object [a]) a terug en de andere geeft MaybeT (Object [a]) Int terug.
Bij contains wordt nagekeken of een lijst het gegeven element bevat. Als dat zo is, krijg je na het uitvoeren van runMaybeT en getObject een tupel van dat element (verpakt in de Maybe Monad, namelijk Just) en de lijst zonder het element. Hiervoor wordt de functie choose gebruikt. Als het element niet in de lijst voorkomt, krijg je een MaybeT terug van Nothing.
FindInList zoekt in een lijst van tuples het eerste element waarvoor het predicaat  geldt voor het eerste element van die tupel. Als het gevonden wordt, krijg je na het uitvoeren van runMaybeT en getObject een tupel van de index en een nieuwe lijst die bestaat uit het eerste element van alle tupels van de lijst. Indien er geen index gevonden is, wordt een MaybeT van Nothing gegeven.

Mijn eigen programmeertaal bevat eenvoudige functies, die ik zal uitleggen aan de hand van het spel Snake.
De functie runSnake start het spel. Hierbij wordt vastgelegd hoe de verschillende objecten eruit moeten zien met de functie setPic, wordt gebruikersinput behandeld met de functie move en wordt een nieuwe stap gemaakt met next. 

In de functie setPic wordt telkens een andere functie opgeroepen die het woord “Picture” bevat in de functienaam. SnakePicture, snakeHeadPicture en foodPicture zijn voorbeelden hiervan om respectievelijk het lichaam van de slang, het hoofd van de slang en het voedsel grafisch voor te stellen. De returnwaarde van deze functies zijn een string en een lijst van getallen. Bij het spel Snake zijn de vormen altijd vierkant dus de string die wordt teruggegeven, is altijd “square”. Als er bijvoorbeeld cirkels gebruikt zouden worden (zoals bij het spel Tanks), zal deze string “circle” zijn.
De lijst van getallen bevat verschillende argumenten om de vorm nog aan te passen. De eerste twee getallen worden gebruikt voor de functie translate van Haskell. Het volgende getal geeft de grootte van de vorm weer en de laatste vier getallen zijn de parameters om de kleur te maken in rgba.

Bij de functie move wordt telkens de nieuwe richting van de slang aangepast afhankelijk van de input van de gebruiker. Hiervoor worden if-statements gebruikt met de toetsen van het toetsenbord die de richting beïnvloeden. 

Bij de functie next worden mogelijke situaties nagekeken met if-statements. Dergelijke situaties zijn wanneer de slang het bord verlaat of zichzelf raakt. Dan is de speler verloren en wordt GameOver teruggegeven met de score. Als de slang echter voedsel tegenkomt, wordt de nieuwe slang teruggegeven en soms wordt nieuw voedsel toegevoegd. 
